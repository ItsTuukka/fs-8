{"ast":null,"code":"var _jsxFileName = \"/home/ytuukka/fs_part_8/library-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Authors from './components/Authors';\nimport Books from './components/Books';\nimport NewBook from './components/NewBook';\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALL_AUTHORS = gql`\n  query {\n    allAuthors {\n      name\n      born\n      bookCount\n    }\n  }\n`;\nconst ALL_BOOKS = gql`\n  query {\n    allBooks {\n      title\n      author\n      published\n    }\n  }\n`;\nconst CREATE_BOOK = gql`\n  mutation createBook(\n    $title: String!\n    $author: String!\n    $published: Int!\n    $genres: [String!]!\n  ) {\n    addBook(\n      title: $title\n      author: $author\n      published: $published\n      genres: $genres\n    ) {\n      title\n      author\n      published\n      genres\n    }\n  }\n`;\nconst EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $born: Int!) {\n    editAuthor(name: $name, setBornTo: $born) {\n      name\n      born\n    }\n  }\n`;\n\nconst App = () => {\n  _s();\n\n  const [page, setPage] = useState('authors');\n  const authors = useQuery(ALL_AUTHORS);\n  const books = useQuery(ALL_BOOKS);\n  const [createBook] = useMutation(CREATE_BOOK, {\n    refetchQueries: [{\n      query: ALL_BOOKS\n    }]\n  });\n\n  if (authors.loading || books.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage('authors'),\n        children: \"authors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage('books'),\n        children: \"books\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage('add'),\n        children: \"add book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Authors, {\n      show: page === 'authors',\n      authors: authors.data.allAuthors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Books, {\n      show: page === 'books',\n      books: books.data.allBooks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewBook, {\n      show: page === 'add',\n      createBook: createBook\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"kDAZy50BS8brP6VwnL4wqWqU7RQ=\", false, function () {\n  return [useQuery, useQuery, useMutation];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ytuukka/fs_part_8/library-frontend/src/App.js"],"names":["useState","Authors","Books","NewBook","gql","useQuery","useMutation","ALL_AUTHORS","ALL_BOOKS","CREATE_BOOK","EDIT_AUTHOR","App","page","setPage","authors","books","createBook","refetchQueries","query","loading","data","allAuthors","allBooks"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,WAAxB,QAA2C,gBAA3C;;AAEA,MAAMC,WAAW,GAAGH,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMI,SAAS,GAAGJ,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMK,WAAW,GAAGL,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;AAqBA,MAAMM,WAAW,GAAGN,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,MAAMO,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,SAAD,CAAhC;AACA,QAAMc,OAAO,GAAGT,QAAQ,CAACE,WAAD,CAAxB;AACA,QAAMQ,KAAK,GAAGV,QAAQ,CAACG,SAAD,CAAtB;AACA,QAAM,CAACQ,UAAD,IAAeV,WAAW,CAACG,WAAD,EAAc;AAC5CQ,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEV;AAAT,KAAD;AAD4B,GAAd,CAAhC;;AAIA,MAAIM,OAAO,CAACK,OAAR,IAAmBJ,KAAK,CAACI,OAA7B,EAAsC;AACpC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAMN,OAAO,CAAC,SAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMA,OAAO,CAAC,OAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAMA,OAAO,CAAC,KAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAI,KAAK,SAAxB;AAAmC,MAAA,OAAO,EAAEE,OAAO,CAACM,IAAR,CAAaC;AAAzD;AAAA;AAAA;AAAA;AAAA,YAPF,eASE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAET,IAAI,KAAK,OAAtB;AAA+B,MAAA,KAAK,EAAEG,KAAK,CAACK,IAAN,CAAWE;AAAjD;AAAA;AAAA;AAAA;AAAA,YATF,eAWE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEV,IAAI,KAAK,KAAxB;AAA+B,MAAA,UAAU,EAAEI;AAA3C;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA3BD;;GAAML,G;UAEYN,Q,EACFA,Q,EACOC,W;;;KAJjBK,G;AA6BN,eAAeA,GAAf","sourcesContent":["import { useState } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport { gql, useQuery, useMutation } from '@apollo/client'\n\nconst ALL_AUTHORS = gql`\n  query {\n    allAuthors {\n      name\n      born\n      bookCount\n    }\n  }\n`\n\nconst ALL_BOOKS = gql`\n  query {\n    allBooks {\n      title\n      author\n      published\n    }\n  }\n`\n\nconst CREATE_BOOK = gql`\n  mutation createBook(\n    $title: String!\n    $author: String!\n    $published: Int!\n    $genres: [String!]!\n  ) {\n    addBook(\n      title: $title\n      author: $author\n      published: $published\n      genres: $genres\n    ) {\n      title\n      author\n      published\n      genres\n    }\n  }\n`\n\nconst EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $born: Int!) {\n    editAuthor(name: $name, setBornTo: $born) {\n      name\n      born\n    }\n  }\n`\n\nconst App = () => {\n  const [page, setPage] = useState('authors')\n  const authors = useQuery(ALL_AUTHORS)\n  const books = useQuery(ALL_BOOKS)\n  const [createBook] = useMutation(CREATE_BOOK, {\n    refetchQueries: [{ query: ALL_BOOKS }],\n  })\n\n  if (authors.loading || books.loading) {\n    return <div>loading...</div>\n  }\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button onClick={() => setPage('add')}>add book</button>\n      </div>\n\n      <Authors show={page === 'authors'} authors={authors.data.allAuthors} />\n\n      <Books show={page === 'books'} books={books.data.allBooks} />\n\n      <NewBook show={page === 'add'} createBook={createBook} />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}